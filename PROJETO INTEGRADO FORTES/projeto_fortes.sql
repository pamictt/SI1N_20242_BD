-- CRIANDO BANCO DE DADOS
CREATE SCHEMA IF NOT EXISTS PROJETO_FORTES;

-- SELECIONANDO BANCO DE DADOS
USE PROJETO_FORTES;

-- CRIAÇÃO DAS TABELAS

-- TABELA FUNCIONARIOS
CREATE TABLE IF NOT EXISTS FUNCIONARIOS (
    REGISTRO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(100) NOT NULL,
    EMAIL VARCHAR(100) UNIQUE NOT NULL,
    DATA_NASCIMENTO DATE NOT NULL
);

-- TABELA EDITAIS
CREATE TABLE IF NOT EXISTS EDITAIS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(100) NOT NULL,
    DESCRICAO TEXT,
    VALOR DECIMAL(10, 2) NOT NULL,
    REGISTRO_FUNCIONARIO INT NOT NULL,
    FOREIGN KEY (REGISTRO_FUNCIONARIO) REFERENCES FUNCIONARIOS(REGISTRO)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- TABELA DONATARIOS
CREATE TABLE IF NOT EXISTS DONATARIOS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(100) NOT NULL,
    EMAIL VARCHAR(100) UNIQUE NOT NULL,
    DATA_NASCIMENTO DATE NOT NULL
);

-- TABELA PROJETOS
CREATE TABLE IF NOT EXISTS PROJETOS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(100) NOT NULL,
    DESCRICAO TEXT,
    ID_DONATARIO INT NOT NULL,
    ID_EDITAL INT NOT NULL,
    FOREIGN KEY (ID_DONATARIO) REFERENCES DONATARIOS(ID)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (ID_EDITAL) REFERENCES EDITAIS(ID)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- TABELA EVENTOS
CREATE TABLE IF NOT EXISTS EVENTOS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(100) NOT NULL,
    DATA DATE NOT NULL,
    LOCAL VARCHAR(255) NOT NULL,
    DESCRICAO TEXT,
    REGISTRO_FUNCIONARIO INT NOT NULL,
    ID_DONATARIO INT NOT NULL,
    FOREIGN KEY (REGISTRO_FUNCIONARIO) REFERENCES FUNCIONARIOS(REGISTRO)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (ID_DONATARIO) REFERENCES DONATARIOS(ID)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- TABELA NOTAS FISCAIS
CREATE TABLE IF NOT EXISTS NOTAS_FISCAIS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    DESCRICAO TEXT NOT NULL,
    VALOR DECIMAL(10, 2) NOT NULL,
    ID_DONATARIO INT NOT NULL,
    FOREIGN KEY (ID_DONATARIO) REFERENCES DONATARIOS(ID)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- TABELA LOGPROJETOS
CREATE TABLE IF NOT EXISTS LOGPROJETOS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    OPERACAO VARCHAR(20) NOT NULL,
    DETALHES TEXT NOT NULL,
    DATA_HORA TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ADICIONADO: TABELA STATUS_PROJETO
CREATE TABLE IF NOT EXISTS STATUS_PROJETO (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    ID_PROJETO INT NOT NULL,
    STATUS ENUM('PENDENTE', 'EM PROGRESSO', 'CONCLUÍDO', 'REJEITADO') NOT NULL,
    REGISTRO_FUNCIONARIO INT NOT NULL,
    DATA_APROVACAO TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ID_PROJETO) REFERENCES PROJETOS(ID)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (REGISTRO_FUNCIONARIO) REFERENCES FUNCIONARIOS(REGISTRO)
        ON DELETE SET NULL
        ON UPDATE CASCADE
);

-- INSERÇÃO DE DADOS INICIAIS

-- FUNCIONARIOS
INSERT INTO FUNCIONARIOS (NOME, EMAIL, DATA_NASCIMENTO)
VALUES 
('JOÃO SILVA', 'JOAO@EMAIL.COM', '1985-03-22'),
('MARIA SOUZA', 'MARIA@EMAIL.COM', '1990-08-10');

-- EDITAIS
INSERT INTO EDITAIS (NOME, DESCRICAO, VALOR, REGISTRO_FUNCIONARIO)
VALUES 
('EDITAL DE PROJETOS 2024', 'EDITAL PARA NOVOS PROJETOS SOCIAIS', 100000.00, 1);

-- DONATARIOS
INSERT INTO DONATARIOS (NOME, EMAIL, DATA_NASCIMENTO)
VALUES 
('INSTITUIÇÃO A', 'CONTATO@INSTITUICAOA.COM', '2000-01-01');

-- PROJETOS
INSERT INTO PROJETOS (NOME, DESCRICAO, ID_DONATARIO, ID_EDITAL)
VALUES 
('PROJETO SOCIAL A', 'DESCRIÇÃO DO PROJETO SOCIAL A', 1, 1);

-- EVENTOS
INSERT INTO EVENTOS (NOME, DATA, LOCAL, DESCRICAO, REGISTRO_FUNCIONARIO, ID_DONATARIO)
VALUES 
('EVENTO DE APRESENTAÇÃO', '2024-12-15', 'AUDITÓRIO CENTRAL', 'APRESENTAÇÃO DO PROJETO', 1, 1);

-- NOTAS FISCAIS
INSERT INTO NOTAS_FISCAIS (DESCRICAO, VALOR, ID_DONATARIO)
VALUES 
('NOTA FISCAL DE EQUIPAMENTOS', 2500.00, 1);

-- STATUS_PROJETO
INSERT INTO STATUS_PROJETO (ID_PROJETO, STATUS, REGISTRO_FUNCIONARIO)
VALUES 
(1, 'PENDENTE', 1);

-- TRIGGERS

-- TRIGGER DE LOG PARA PROJETOS
DELIMITER $$
CREATE TRIGGER TRG_LOG_PROJETOS
AFTER INSERT OR UPDATE OR DELETE ON PROJETOS
FOR EACH ROW
BEGIN
    DECLARE DETALHES TEXT;
    IF (OLD.ID IS NOT NULL AND NEW.ID IS NOT NULL) THEN
        SET DETALHES = CONCAT('ATUALIZADO: ', OLD.NOME, ' PARA ', NEW.NOME);
    ELSEIF (OLD.ID IS NULL) THEN
        SET DETALHES = CONCAT('INSERIDO: ', NEW.NOME);
    ELSEIF (NEW.ID IS NULL) THEN
        SET DETALHES = CONCAT('REMOVIDO: ', OLD.NOME);
    END IF;
    INSERT INTO LOGPROJETOS (OPERACAO, DETALHES) VALUES (
        CASE
            WHEN OLD.ID IS NULL THEN 'INSERT'
            WHEN NEW.ID IS NULL THEN 'DELETE'
            ELSE 'UPDATE'
        END, DETALHES);
END$$
DELIMITER ;

-- TRIGGER DE LOG PARA STATUS_PROJETO
DELIMITER $$
CREATE TRIGGER TRG_LOG_STATUS_PROJETO
AFTER INSERT OR UPDATE ON STATUS_PROJETO
FOR EACH ROW
BEGIN
    DECLARE DETALHES TEXT;
    SET DETALHES = CONCAT(
        'STATUS ATUALIZADO PARA: ', NEW.STATUS,
        ' PELO FUNCIONÁRIO: ', NEW.REGISTRO_FUNCIONARIO
    );
    INSERT INTO LOGPROJETOS (OPERACAO, DETALHES)
    VALUES ('STATUS_UPDATE', DETALHES);
END$$
DELIMITER ;

-- PROCEDURES

-- PROCEDURE PARA ATUALIZAR STATUS DE PROJETOS
DELIMITER $$
CREATE PROCEDURE ATUALIZARSTATUSPROJETO (
    IN PROJETO_ID INT,
    IN NOVO_STATUS ENUM('PENDENTE', 'EM PROGRESSO', 'CONCLUÍDO', 'REJEITADO'),
    IN FUNCIONARIO_REGISTRO INT
)
BEGIN
    INSERT INTO STATUS_PROJETO (ID_PROJETO, STATUS, REGISTRO_FUNCIONARIO)
    VALUES (PROJETO_ID, NOVO_STATUS, FUNCIONARIO_REGISTRO);
END$$
DELIMITER ;

-- EXEMPLO DE USO DA PROCEDURE
CALL ATUALIZARSTATUSPROJETO(1, 'EM PROGRESSO', 2);
